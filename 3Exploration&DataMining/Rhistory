c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width")
#Además se pueden ralizar la gráficas de caja para cada una de las respuestas por especie:
par(mfrow=c(2, 2))
for (response in c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width"))Boxplot(iris[, response] ~ Species, data=iris, ylab=response)
#No obstante, procedemos a ajustar un modelo ANOVA multivariante unidireccional a los
#datos:
mod.iris <- lm (cbind (Sepal.Length, Sepal.Width, Petal.Length, Petal.Width) ~ Species, data = iris)
#Veamos el tipo de objeto que es la variable mod.iris
class(mod.iris)
summary(mod.iris)
#Usamos la función Anova en el paquete car para probar la hipótesis nula de que las
#cuatro medidas de respuesta son idénticas en las tres especies de iris:
manova.iris <- Anova(mod.iris)
manova.iris
#Llamamos a la clase
class(manova.iris)
#Veamos el resumen
summary(manova.iris)
#La función linearHypothesis de car se puede utilizar para probar hipótesis más específicas
#sobre los parámetros en el modelo lineal multivariado. Por ejemplo, para probar las
#diferencias entre setosa y el promedio de versicolor y virginica, y las diferencias
#entre versicolor y virginica:
linearHypothesis(mod.iris, "0.5*Speciesversicolor + 0.5*Speciesvirginica", verbose = TRUE)
linearHypothesis(mod.iris, "Speciesversicolor = Speciesvirginica",verbose=TRUE)
library(heplots)
heplot(mod.iris)
#Un enfoque alternativo, equivalente y, en cierto sentido, más directo es ajustar
#el modelo con contrastes personalizados para las tres especies de iris, seguido de
#una prueba para cada contraste:
C <- matrix(c(1, -0.5, -0.5, 0, 1, -1), 3, 2)
View(C)
sample(1: 6, 1)
# generar el vector de probabilidades
probabilidad <- rep (1/6, 6)
# trazar las probabilidades
plot(probabilidad, xlab = "resultados", main = "Distribución de probabilidad")
# generar el vector de probabilidades acumuladas
cum_probability <- cumsum (probabilidad)
#graficar las probabilidades
plot(cum_probability, xlab = "resultados", main = "Distribución de probabilidad acumulada")
muestra(c ("H", "T"), 1)
sample(c ("H", "T"), 1)
#Calculemos P(k=5|n=10, p=0.5), o en breve P(k=5)
dbinom (x = 5,size = 10,prob = 0.5))
#Calculemos P(k=5|n=10, p=0.5), o en breve P(k=5)
dbinom (x = 5,size = 10,prob = 0.5)
# compute P(4 <= k <= 7) using 'dbinom()'
sum(dbinom(x = 4:7, size = 10, prob = 0.5))
# calcular P (4 <= k <= 7) usando 'pbinom ()'
pbinom(size = 10, prob = 0.5, q = 7) - pbinom(size = 10, prob = 0.5, q = 3)
# asignar las probabilidades
probabilidad <- dbinom (x = k, size = 10, prob = 0,5)
# graficar los resultados contra sus probabilidades
plot(x = k, y = probabilidad, main = "Función de distribución de probabilidad")
# configurar vector de posibles resultados
k <- 0:10
k
# asignar las probabilidades
probabilidad <- dbinom (x = k, size = 10, prob = 0,5)
# graficar los resultados contra sus probabilidades
plot(x = k, y = probabilidad, main = "Función de distribución de probabilidad")
# asignar las probabilidades
probabilidad <- dbinom (x = k, size = 10, prob = 0.5)
# graficar los resultados contra sus probabilidades
plot(x = k, y = probabilidad, main = "Función de distribución de probabilidad")
# calcular probabilidades acumuladas
prob <- pbinom (q = k, size = 10, prob = 0.5)
# trazar las probabilidades acumuladas
plot(x = k, y = prob, main = "Función de distribución acumulativa")
# calcular la media de números naturales del 1 al 6
mean(1: 6)
#fijamos la semilla para la reproducibilidad
set.seed (1)
# tira un dado tres veces seguidas
sample(1: 6, 3, replace = T)
1:10000
# calcular la media muestral de 10000 tiradas de dados
mean(sample(1: 6, 10000, replace = T))
var (1: 6)
f <- function(x) 3 / x^4
g <- function(x) x * f(x)
h <- function(x) x^2 * f(x)
# calcular el área bajo la curva de densidad
area <- integrate(f, lower = 1, upper = Inf)$value
area
# calcular Var (X)
VarX <- integrate(g,lower = 1, upper = Inf)$value
VarX
setwd("C:/Users/avalo/OneDrive/Documentos/tec_documentos_plataforma/facebook_work")
db <-read.csv("pba2.csv", header = T, stringsAsFactors = F)
db2 <-read.csv("pba.csv", header = T, stringsAsFactors = F)
db <- cbind.data.frame(db,db2)
View(db)
db <-read.csv("facebook_target.csv", header = T, stringsAsFactors = F)
View(db)
db_succes <- subset(db, db$Clus_km == 1)
table(db_succes$Type)
table(db_succes$Category)
table(db$Paid)
columns <- colnames(db_succes)
table(db$Page.total.likes)
hist(db$Page.total.likes)
mean(db$Page.total.likes)
sd(db$Page.total.likes)
123212.8+16205.15
View(db_succes)
colnames(db_s   )
colnames(db_succes)
#Lets take the non categorical columns
columns <- c("Page.total.likes","Post.Month" , "Post.Weekday","Post.Hour", "LPost.Tot.Reach" ,
"LPost.Tot.Impressions",  "Lifetime.Engaged.Users", "LPost.Consumers", "LPost.Consumptions",
"LPost.Liked.Page.Impressions","LPost.Liked.Page.Reach", "LPeople.Post.Like...Engange",
"comment"  , "like"  , "share" )]
#Lets take the non categorical columns
columns <- c("Page.total.likes","Post.Month", "Post.Weekday","Post.Hour", "LPost.Tot.Reach" ,
"LPost.Tot.Impressions",  "Lifetime.Engaged.Users", "LPost.Consumers", "LPost.Consumptions",
"LPost.Liked.Page.Impressions","LPost.Liked.Page.Reach", "LPeople.Post.Like...Engange",
"comment"  , "like"  , "share" )]
#Lets take the non categorical columns
columns <- c("Page.total.likes","Post.Month", "Post.Weekday","Post.Hour", "LPost.Tot.Reach" ,
"LPost.Tot.Impressions",  "Lifetime.Engaged.Users", "LPost.Consumers", "LPost.Consumptions",
"LPost.Liked.Page.Impressions","LPost.Liked.Page.Reach", "LPeople.Post.Like...Engange",
"comment"  , "like"  , "share" )
i=1
name <- columns[[i]]
mean(db_succes[,name])
set.seed(124)
simula <- round(rnorm(300, dmean, dstd ))
dmean <- mean(db_succes[,name])
dstd <- std(db_succes[,name])
simula <- round(rnorm(300, dmean, dstd ))
dstd <- sd(db_succes[,name])
simula <- round(rnorm(300, dmean, dstd ))
hist(simula, main=name)
preliminar <- cbind.data.frame(preliminar, simula)
preliminar <- NULL
preliminar <- cbind.data.frame(preliminar, simula)
preliminar <- as.data.frame("id"=1:300)
preliminar <- as.data.frame(id=1:300)
preliminar <- as.data.frame(1:300)
preliminar <- cbind.data.frame(preliminar, simula)
View(db2)
View(preliminar)
colnames(preliminar)[i+1] = name
View(preliminar)
#Lets take the non categorical columns
columns <- c("Page.total.likes","Post.Month", "Post.Weekday","Post.Hour", "LPost.Tot.Reach" ,
"LPost.Tot.Impressions",  "Lifetime.Engaged.Users", "LPost.Consumers", "LPost.Consumptions",
"LPost.Liked.Page.Impressions","LPost.Liked.Page.Reach", "LPeople.Post.Like...Engange",
"comment"  , "like"  , "share" )
preliminar <- as.data.frame(1:300)
set.seed(124)
for(i in 1:length(columns)){
# i=1
name <- columns[[i]]
dmean <- mean(db_succes[,name])
dstd <- sd(db_succes[,name])
simula <- round(rnorm(300, dmean, dstd ))
preliminar <- cbind.data.frame(preliminar, simula)
colnames(preliminar)[i+1] = name
}
View(preliminar)
table(db$Paid)
rbinom(300, size = 1, prob=137/353)
table(rbinom(300, size = 1, prob=137/353))
table(rbinom(300, size = 1, prob=1/4))
colnames(db_succes)
preliminar$Paid <- rbinom(300, size = 1, prob=1/4)
preliminar <- as.data.frame(1:300)
set.seed(124)
preliminar <- as.data.frame(1:300)
set.seed(124)
for(i in 1:length(columns)){
# i=1
name <- columns[[i]]
dmean <- mean(db_succes[,name])
dstd <- sd(db_succes[,name])
simula <- round(rnorm(300, dmean, dstd ))
preliminar <- cbind.data.frame(preliminar, simula)
colnames(preliminar)[i+1] = name
}
preliminar$Paid <- rbinom(300, size = 1, prob=1/4)
preliminar$Category
table(db_succes$Category)
sample(3, 10, prob = c(0.25, 0.25, 0.5), replace = T)
preliminar$Category <-sample(3, 300, prob = c(0.25, 0.25, 0.5), replace = T)
View(preliminar)
table(preliminar$Category)
table(preliminar$Paid)
table(db_succes$Type)
preliminar$Type <- sample(3, 300, prob=c(45/56, 7/56, 4/56))
preliminar$Type <- sample(3, 300, prob=c(45/56, 7/56, 4/56), replace=T)
table(preliminar$Type)
table(db_succes$Paid)
#Fix wd
setwd("C:/Users/avalo/OneDrive/Documentos/tec_documentos_plataforma/facebook_work")
db <-read.csv("facebook_target.csv", header = T, stringsAsFactors = F)
#Lets filter by group
db_succes <- subset(db, db$Clus_km == 1)
#Lets see it distribution by type
table(db_succes$Type)
table(db_succes$Category)
table(db$Paid)
columns <- colnames(db_succes)
#Lets take the non categorical columns
columns <- c("Page.total.likes","Post.Month", "Post.Weekday","Post.Hour", "LPost.Tot.Reach" ,
"LPost.Tot.Impressions",  "Lifetime.Engaged.Users", "LPost.Consumers", "LPost.Consumptions",
"LPost.Liked.Page.Impressions","LPost.Liked.Page.Reach", "LPeople.Post.Like...Engange",
"comment"  , "like"  , "share" )
preliminar <- as.data.frame(1:300)
set.seed(124)
for(i in 1:length(columns)){
# i=1
name <- columns[[i]]
dmean <- mean(db_succes[,name])
dstd <- sd(db_succes[,name])
simula <- round(rnorm(300, dmean, dstd ))
preliminar <- cbind.data.frame(preliminar, simula)
colnames(preliminar)[i+1] = name
}
#Generemos 0 y 1 para pagado y no pagado
preliminar$Paid <- rbinom(300, size = 1, prob=21/56)
preliminar$Category <-sample(3, 300, prob = c(17/56, 18/56, 21/56), replace = T)
preliminar$Type <- sample(3, 300, prob=c(45/56, 7/56, 4/56), replace=T)
View(preliminar)
colnames(db)
preliminar$Total.Interactions = preliminar$comment+preliminar$like+preliminar$share
preliminar$Total.Interactions = preliminar$comment+ preliminar$like+preliminar$share
preliminar$succes = (0.53841967*preliminar$comment)+(0.59703395*preliminar$like)+ (0.59468876*preliminar$share)
preliminar$Clus_km = rep(1, times=300)
View(preliminar)
#Lets remove negative values
summary(preliminar)
summary(db)
#Fix wd
setwd("C:/Users/avalo/OneDrive/Documentos/tec_documentos_plataforma/facebook_work")
db <-read.csv("facebook_target.csv", header = T, stringsAsFactors = F)
#Lets filter by group
db_succes <- subset(db, db$Clus_km == 1)
#Lets see it distribution by type
table(db_succes$Type)
table(db_succes$Category)
table(db$Paid)
columns <- colnames(db_succes)
#Lets take the non categorical columns
columns <- c("Page.total.likes","Post.Month", "Post.Weekday","Post.Hour", "LPost.Tot.Reach" ,
"LPost.Tot.Impressions",  "Lifetime.Engaged.Users", "LPost.Consumers", "LPost.Consumptions",
"LPost.Liked.Page.Impressions","LPost.Liked.Page.Reach", "LPeople.Post.Like...Engange",
"comment"  , "like"  , "share" )
preliminar <- as.data.frame(1:300)
set.seed(124)
for(i in 1:length(columns)){
# i=1
name <- columns[[i]]
dmean <- mean(db_succes[,name])
dstd <- sd(db_succes[,name])
simula <- round(rnorm(300, dmean, dstd ))
preliminar <- cbind.data.frame(preliminar, simula)
colnames(preliminar)[i+1] = name
}
#Generemos 0 y 1 para pagado y no pagado
preliminar$Paid <- rbinom(300, size = 1, prob=21/56)
#Generemos las categorias
preliminar$Category <-sample(3, 300, prob = c(17/56, 18/56, 21/56), replace = T)
#Generemos el tipo
preliminar$Type <- sample(3, 300, prob=c(45/56, 7/56, 4/56), replace=T)
preliminar$Total.Interactions = preliminar$comment+ preliminar$like+preliminar$share
#Lets remove negative values
summary(preliminar)
for (name in names) {
print(name)
}
for (name in columns) {
print(name)
}
aux <-preliminar
aux[aux[,"like"]>=0,]
aux2 <- aux[aux[,"like"]>=0,]
#Lets remove negative values
summary(preliminar)
for (name in columns) {
print(name)
preliminar <- preliminar[preliminar[,name]>=0,]
}
summary(preliminar)
preliminar <- as.data.frame(1:600)
set.seed(124)
for(i in 1:length(columns)){
# i=1
name <- columns[[i]]
dmean <- mean(db_succes[,name])
dstd <- sd(db_succes[,name])
simula <- round(rnorm(600, dmean, dstd ))
preliminar <- cbind.data.frame(preliminar, simula)
colnames(preliminar)[i+1] = name
}
#Lets remove negative values
summary(preliminar)
for (name in columns) {
print(name)
preliminar <- preliminar[preliminar[,name]>=0,]
}
summary(preliminar)
n = length(preliminar$Page.total.likes)
#Generemos 0 y 1 para pagado y no pagado
preliminar$Paid <- rbinom(n, size = 1, prob=21/56)
#Generemos las categorias 1,2,3
preliminar$Category <-sample(3, n, prob = c(17/56, 18/56, 21/56), replace = T)
#Generemos el tipo
preliminar$Type <- sample(3, n, prob=c(45/56, 7/56, 4/56), replace=T)
preliminar$Total.Interactions = preliminar$comment+ preliminar$like+preliminar$share
#Lets remove negative values
summary(preliminar)
preliminar <- preliminar[,-c(1)]
View(preliminar)
#Lets remove negative values
summary(preliminar)
write.csv(preliminar, file="facebook_ntest", row.names=F)
write.csv(preliminar, file="facebook_mock.csv", row.names=F)
nombres <- colnames(db_succes[,c(1:19)])
preliminar <- preliminar[,nombres]
#Lets remove negative values
summary(preliminar)
write.csv(preliminar, file="facebook_mock.csv", row.names=F)
summary(db_succes)
final <- NULL
set.seed(124)
library(dplyr)
for(j in 1:20){
aux <- sample_n(df, 30)
for(i in 1:length(columns)){
# i=1
preliminar <- as.data.frame(1:30)
name <- columns[[i]]
dmean <- mean(aux[,name])
dstd <- sd(aux[,name])
simula <- round(rnorm(600, dmean, dstd ))
preliminar <- cbind.data.frame(preliminar, simula)
colnames(preliminar)[i+1] = name
}
final <- rbind.data.frame(final, preliminar)
}
final <- NULL
set.seed(124)
library(dplyr)
for(j in 1:20){
aux <- sample_n(db_succes, 30)
for(i in 1:length(columns)){
# i=1
preliminar <- as.data.frame(1:30)
name <- columns[[i]]
dmean <- mean(aux[,name])
dstd <- sd(aux[,name])
simula <- round(rnorm(600, dmean, dstd ))
preliminar <- cbind.data.frame(preliminar, simula)
colnames(preliminar)[i+1] = name
}
final <- rbind.data.frame(final, preliminar)
}
final <- NULL
set.seed(124)
library(dplyr)
for(j in 1:20){
aux <- sample_n(db_succes, 30)
for(i in 1:length(columns)){
# i=1
preliminar <- as.data.frame(1:30)
name <- columns[[i]]
dmean <- mean(aux[,name])
dstd <- sd(aux[,name])
simula <- round(rnorm(600, dmean, dstd ))
preliminar <- cbind.data.frame(preliminar, simula)
colnames(preliminar)[i+1] = name
final <- rbind.data.frame(final, preliminar)
}
}
aux <- sample_n(db_succes, 30)
#i=1
preliminar <- as.data.frame(1:30)
name <- columns[[i]]
dmean <- mean(aux[,name])
dstd <- sd(aux[,name])
simula <- round(rnorm(600, dmean, dstd ))
preliminar <- cbind.data.frame(preliminar, simula)
colnames(preliminar)[i+1] = name
#colnames(preliminar)[i+1] = name
final <- rbind.data.frame(final, preliminar)
View(preliminar)
View(final)
final <- NULL
set.seed(124)
library(dplyr)
for(j in 1:20){
aux <- sample_n(db_succes, 30)
for(i in 1:length(columns)){
#i=1
preliminar <- as.data.frame(1:30)
name <- columns[[i]]
dmean <- mean(aux[,name])
dstd <- sd(aux[,name])
simula <- round(rnorm(600, dmean, dstd ))
preliminar <- cbind.data.frame(preliminar, simula)
colnames(preliminar)[i+1] = name
}
final <- rbind.data.frame(final, preliminar)
}
final <- list()
set.seed(124)
library(dplyr)
for(j in 1:20){
aux <- sample_n(db_succes, 30)
for(i in 1:length(columns)){
#i=1
preliminar <- as.data.frame(1:30)
name <- columns[[i]]
dmean <- mean(aux[,name])
dstd <- sd(aux[,name])
simula <- round(rnorm(600, dmean, dstd ))
preliminar <- cbind.data.frame(preliminar, simula)
colnames(preliminar)[i+1] = name
}
final[[j]] <- preliminar
}
final <- list()
set.seed(124)
library(dplyr)
for(j in 1:20){
aux <- sample_n(db_succes, 30)
preliminar <- as.data.frame(1:30)
for(i in 1:length(columns)){
#i=1
name <- columns[[i]]
dmean <- mean(aux[,name])
dstd <- sd(aux[,name])
simula <- round(rnorm(600, dmean, dstd ))
preliminar <- cbind.data.frame(preliminar, simula)
colnames(preliminar)[i+1] = name
}
final[[j]] <- preliminar
}
final[[1]]
final <- NULL
set.seed(124)
library(dplyr)
for(j in 1:20){
aux <- sample_n(db_succes, 30)
preliminar <- as.data.frame(1:30)
for(i in 1:length(columns)){
#i=1
name <- columns[[i]]
dmean <- mean(aux[,name])
dstd <- sd(aux[,name])
simula <- round(rnorm(30, dmean, dstd ))
preliminar <- cbind.data.frame(preliminar, simula)
colnames(preliminar)[i+1] = name
}
final <-rbind.data.frame(final, preliminar)
}
View(final)
#Lets remove negative values
summary(preliminar)
for (name in columns) {
print(name)
preliminar <- preliminar[preliminar[,name]>=0,]
}
summary(preliminar)
#Lets remove negative values
summary(final)
for (name in columns) {
print(name)
final <- final[final[,name]>=0,]
}
summary(preliminar)
n = length(preliminar$Page.total.likes)
#Generemos 0 y 1 para pagado y no pagado
preliminar$Paid <- rbinom(n, size = 1, prob=21/56)
#Generemos las categorias 1,2,3
preliminar$Category <-sample(3, n, prob = c(17/56, 18/56, 21/56), replace = T)
#Generemos el tipo
preliminar$Type <- sample(3, n, prob=c(45/56, 7/56, 4/56), replace=T)
preliminar$Total.Interactions = preliminar$comment+ preliminar$like+preliminar$share
preliminar <- preliminar[,-c(1)]
nombres <- colnames(db_succes[,c(1:19)])
preliminar <- preliminar[,nombres]
table(db$Type)
table(db_succes$Type)
summary(final)
preliminar <- final
n = length(preliminar$Page.total.likes)
#Generemos 0 y 1 para pagado y no pagado
preliminar$Paid <- rbinom(n, size = 1, prob=21/56)
#Generemos las categorias 1,2,3
preliminar$Category <-sample(3, n, prob = c(17/56, 18/56, 21/56), replace = T)
#Generemos el tipo
preliminar$Type <- sample(3, n, prob=c(45/56, 7/56, 4/56), replace=T)
preliminar$Total.Interactions = preliminar$comment+ preliminar$like+preliminar$share
preliminar <- preliminar[,-c(1)]
nombres <- colnames(db_succes[,c(1:19)])
preliminar <- preliminar[,nombres]
table(preliminar$Type)
table(db_succes$Type)
#Reescribir photo=1, status = 2, Video 3
preliminar$Type <- factor(preliminar$Type, levels = c(1,2,3), labels = c("Photo", "Status", "Video"))
View(preliminar)
write.csv(preliminar, file="facebook_mock.csv", row.names=F)
View(db)
View(db)
#Lets remove the succes and  add the cluster columns
db <- db[-c(20)]
preliminar$Clus_km =1
preliminar <- rbind.data.frame(db,preliminar)
write.csv(preliminar, file="facebook_mock.csv", row.names=F)
